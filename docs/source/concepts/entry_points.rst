.. _entry_points_concept:

=======================
Simulation Entry Points
=======================

.. contents::
   :depth: 2
   :local:
   :backlinks: none

The Vivarium Engine
-------------------

The engine houses the :class:`SimulationContext` -- the key ``vivarium`` object
for running and interacting with simulations. It is the top level manager
for all state information in ``vivarium``.  By intention, it exposes a very
simple interface for managing the
:ref:`simulation lifecycle <lifecycle_concept>`.

The simulation :class:`Builder` is also part of the engine. It is the main
interface that components use to interact with the simulation framework. You
can read more about how the builder works and what services is exposes
:ref:`here <builder_concept>`.

Finally, there is the :func:`RunSimulation` function that offers several ways to run
a simulation.


The command line interface
--------------------------

Run a simulation from the command line using the ``simulate`` command. ``simulate``
has 3 sub-commands ``run, test, profile``. Predictably, the ``run`` subcommand runs
a simulation. It requires a model specification file as input. Results are deposited
in ``~/vivarium_results`` folder by default. ``simulate run`` produces 2 output files:

   - output.hdf
   - final_state.hdf

output.hdf contains the metrics generated by the simulation. final_state.hdf contains
the population state table from the simulation at the final state.

``simulate run`` has several helpful flags. Display the flags by typing
``simulate run --help``. Specifying the verbose flag, ``-v`` or ``--verbose``, prints
timesteps of the simulation and is a good way to track progress of the simulation.

The Interactive Interface
-------------------------

Running a simulation interactively involves creating a ``simulation context``. The simplest
way to achieve this is to use a model specification file as detailed above. In an
interactive context you run ``setup_simulation_from_model_specification`` with the path
to a model specification file as an argument.

There are 3 other ways to create a ``simulation context``. These methods involve considerably
more manual setup but could prove helpful in building and debugging a model.
See :ref:`the interactive tutorial <interactive_tutorial>` for a detailed walkthrough.

Architecture for a distributed interface
----------------------------------------

